#
# CS3099 Group A3
#

name: Checks

on:
  pull_request:
    branches: [ master ]

jobs:
  checks:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    strategy:
      fail-fast: false
      matrix:
        component: [frontend, backend, shared]

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 12

      - run: echo "::set-output name=dir::$(yarn cache dir)"
        id: yarn-cache-dir-path

      - uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - run: rm -rf packages/frontend
        if: ${{ matrix.component != 'frontend' }}
      
      - run: rm -rf packages/backend
        if: ${{ matrix.component != 'backend' }}
      
      - run: npm install -g yarn
      - run: yarn install

      - name: Style checks
        run: yarn workspace unifed-${{ matrix.component }} lint
      
      - name: Build
        run: yarn workspace unifed-${{ matrix.component }} build
      
      - name: Unit tests
        run: yarn workspace unifed-${{ matrix.component }} test:unit

      - run: cp packages/${{ matrix.component }}/coverage/coverage-final.json unit-tests-${{ matrix.component }}.json

      - uses: actions/upload-artifact@v2
        with:
          name: tests-coverage-json
          path: unit-tests-${{ matrix.component }}.json
  
  integration:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: checks
    strategy:
      fail-fast: false
      matrix:
        component: [frontend, backend]
    env:
      NODE_ENV: test

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 12

      - run: echo "::set-output name=dir::$(yarn cache dir)"
        id: yarn-cache-dir-path

      - uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      
      - run: rm -rf packages/frontend
        if: ${{ matrix.component != 'frontend' }}
      
      - run: |
          npm install -g yarn
          npm install -g wait-on

      - run: yarn install 
      - run: yarn workspace unifed-shared build
      - run: yarn workspace unifed-backend build
      - run: make -f Makefile.docker start && wait-on -t 7000 tcp:localhost:27017

      - name: Start frontend
        if: ${{ matrix.component == 'frontend' }}
        run: yarn workspace unifed-frontend start &
        env:
          PORT: 3000

      - name: Start backend
        run: yarn workspace unifed-backend start &
        env:
          SMTP_USERNAME: "will"
          SMTP_PASSWORD: "not"
          SMTP_HOST: "work"
          SMTP_PORT: "420"
          MONGO_HOSTNAME: "localhost"
          MONGO_PORT: "27017"
          MONGO_DATABASE: "unifed"
          MONGO_USERNAME: "user"
          MONGO_PASSWORD: "pass"
          JWT_SECRET: "randomjwtsecret"
          SITE_URL: "http://localhost:8080"
          APPLICATION_NAME: "Unifed"

      - run: wait-on -t 20000 http://localhost:3000/
        if: ${{ matrix.component == 'frontend' }}
      
      - run: wait-on -t 20000 http://localhost:8080/internal/__coverage__

      - name: Integration tests
        run: yarn workspace unifed-${{ matrix.component }} run test:integration
        continue-on-error: true
        env:
          CYPRESS_BASE_URL: http://localhost:3000
          
      - run: make -f Makefile.docker stop

      - uses: actions/upload-artifact@v2
        with:
          name: tests-assets
          path: |
            packages/frontend/cypress/videos
            packages/frontend/cypress/screenshots

      - run: mkdir tmp

      - run: mv packages/frontend/.nyc_output/out.json tmp/integration-tests-frontend.json
        if: ${{ matrix.component == 'frontend' }}
      
      - run: curl http://localhost:8080/internal/__coverage__ | jq .coverage > tmp/integration-tests-backend.json
        if: ${{ matrix.component == 'backend' }}
     
      - run: |
          yarn nyc report --reporter json -t tmp
          mv coverage/coverage-final.json integration-tests-${{ matrix.component}}.json

      - uses: actions/upload-artifact@v2
        with:
          name: tests-coverage-json
          path: integration-tests-*.json
  
  generate-reports:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs:
      - checks
      - integration

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 12

      - run: echo "::set-output name=dir::$(yarn cache dir)"
        id: yarn-cache-dir-path

      - uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      
      - run: rm packages/**/package.json
      - run: yarn install

      - uses: actions/download-artifact@v2
        with:
          name: tests-coverage-json
          path: coverage-json

      - run: ./scripts/generate-coverage-report -i coverage-json -o merged-coverage

      - run: |
          mkdir unit-coverage-json
          cp coverage-json/unit-tests-* unit-coverage-json
          ./scripts/generate-coverage-report -i unit-coverage-json -o unit-coverage
      
      - run: |
          mkdir integration-coverage-json
          cp coverage-json/integration-tests-* integration-coverage-json
          ./scripts/generate-coverage-report -i integration-coverage-json -o integration-coverage

      - uses: actions/upload-artifact@v2
        with:
          name: merged-tests-coverage-html-report
          path: merged-coverage
      
      - uses: actions/upload-artifact@v2
        with:
          name: unit-tests-coverage-html-report
          path: unit-coverage

      - uses: actions/upload-artifact@v2
        with:
          name: integration-tests-coverage-html-report
          path: integration-coverage
