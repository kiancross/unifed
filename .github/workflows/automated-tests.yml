#
# CS3099 Group A3
#

name: Automated Tests

on:
  workflow_dispatch:
  pull_request:
    branches: [ master ]
  schedule:
    # Everyday at 6am
    - cron:  "0 6 */1 * *"

jobs:
  checks:
    name: Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - uses: actions/setup-node@v2
        with:
          node-version: 12

      - id: yarn-paths
        run: |
          echo "::set-output name=cache::$(yarn config get cacheFolder)"
          echo "::set-output name=install::$(yarn config get installStatePath)"
          echo "::set-output name=build::$(yarn config get bstatePath)"
          echo "::set-output name=unplugged::$(yarn config get pnpUnpluggedFolder)"

      - uses: actions/cache@v2
        id: cache
        with:
          path: |
            ${{ steps.yarn-paths.outputs.cache }}
            ${{ steps.yarn-paths.outputs.install }}
            ${{ steps.yarn-paths.outputs.build }}
            ${{ steps.yarn-paths.outputs.unplugged }}
            .pnp.js
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - uses: actions/cache@v2
        id: mongo-cache
        with:
          path: ~/.cache/mongodb-binaries
          key: ${{ runner.os }}-mongodb

      - run: npm install -g yarn

      - name: Install Dependencies 🏗️
        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn install

      - name: Build ⛏️
        run: yarn build

      - name: Generate GraphQL Schema ⚙️
        run: |
          yarn workspace @unifed/backend-internal-server ts-node scripts/generate-schema.ts
          cp packages/backend-internal-server/.schema.graphql packages/frontend/

      - name: Code Style 👠
        run: yarn lint

      - name: Test 📝
        run: yarn test

      - name: Upload Coverage Report (backend-core) 1️⃣ 📊
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: backend-core
          directory: packages/backend-core
          fail_ci_if_error: true

      - name: Upload Coverage Report (backend-federation-client) 2️⃣ 📊
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: backend-federation-client
          directory: packages/backend-federation-client
          fail_ci_if_error: true

      - name: Upload Coverage Report (backend-federation-server) 3️⃣ 📊
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: backend-federation-server
          directory: packages/backend-federation-server
          fail_ci_if_error: true

      - name: Upload Coverage Report (backend-internal-server) 4️⃣ 📊
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: backend-internal-server
          directory: packages/backend-internal-server
          fail_ci_if_error: true

      - name: Upload Coverage Report (backend-spam) 5️⃣ 📊
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: backend-spam
          directory: packages/backend-spam
          fail_ci_if_error: true
      
      - name: Upload Coverage Report (frontend) 6️⃣ 📊
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: frontend
          directory: packages/frontend
          fail_ci_if_error: true

      - name: Upload Coverage Report (shared) 7️⃣ 📊
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: shared
          directory: packages/shared
          fail_ci_if_error: true
