#
# CS3099 Group A3
#

events {}

http {
  include    /etc/nginx/mime.types;

  server {
    listen 80;

    # Bit of a hack so that it will work with both
    # Podman and Docker.
    resolver 127.0.0.11 127.0.0.1 ipv6=off;

    gzip on;
    gzip_types text/css application/javascript application/json image/svg+xml;
    gzip_comp_level 9;

    # Internal API requests.
    location ~ ^/(?:internal(?:/(.*))?)$ {
      proxy_pass         http://backend-internal:7080/$1$is_args$args;
      proxy_redirect     off;
      proxy_set_header   Host            $host;
      proxy_set_header   X-Real-IP       $remote_addr;
      proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
    }

    # Federation API requests.
    location ~ ^/(?:fed(?:/(.*))?)$ {
      proxy_pass         http://backend-federation:7081/$1$is_args$args;
      proxy_redirect     off;
      proxy_set_header   Host            $host;
      proxy_set_header   X-Real-IP       $remote_addr;
      proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
    }
    
    # Requests for the frontend *could* be served statically,
    # however this would require a full rebuild for every change.
    # Using the react development server is easier for developers
    # as changes are instant.
    location / {
      proxy_pass         http://frontend:3000$1;
      proxy_redirect     off;
      proxy_set_header   Host            $host;
      proxy_set_header   X-Real-IP       $remote_addr;
      proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
    }
  }
}
